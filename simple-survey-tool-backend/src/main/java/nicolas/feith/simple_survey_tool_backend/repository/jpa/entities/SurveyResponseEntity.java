package nicolas.feith.simple_survey_tool_backend.repository.jpa.entities;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import jakarta.persistence.Column;
import jakarta.persistence.Convert;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import nicolas.feith.simple_survey_tool_backend.core.model.surveyresponses.SurveyResponse;
import nicolas.feith.simple_survey_tool_backend.repository.jpa.utils.SurveyAnswersJSONConverter;

@Entity
@Table(name = "survey_responses")
public class SurveyResponseEntity {

    @Id
    @Column(name = "id")
    @GeneratedValue(strategy = GenerationType.IDENTITY) // autogenerated identity because business doens't care about the response id 
    private Long id;
    
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "survey_id", nullable = false)
    private SurveyEntity survey;
    
    @Column(name = "answered_at", nullable = false)
    private LocalDateTime answeredAt;
    
    @Column(name = "answer_value", columnDefinition = "TEXT")
    @Convert(converter = SurveyAnswersJSONConverter.class)
    private Map<UUID, Object> answers = new HashMap<>();

    public SurveyResponseEntity() {
        // Required by JPA
    }
    
    public SurveyResponseEntity(SurveyEntity survey, LocalDateTime answeredAt, Map<UUID, Object> answers) {
        this.survey = survey;
        this.answeredAt = answeredAt != null ? answeredAt : LocalDateTime.now();
        if (answers != null) {
            this.answers.putAll(answers);
        }
    }

    public Long getId() {
        return id;
    }
    

    public void setId(Long id) {
        this.id = id;
    }

    public SurveyEntity getSurvey() {
        return survey;
    }

    public void setSurvey(SurveyEntity survey) {
        this.survey = survey;
    }

    public LocalDateTime getAnsweredAt() {
        return answeredAt;
    }

    public void setAnsweredAt(LocalDateTime answeredAt) {
        this.answeredAt = answeredAt;
    }

    public Map<UUID, Object> getAnswers() {
        return answers;
    }

    public void setAnswers(Map<UUID, Object> answers) {
        this.answers = answers;
    }
    
    public void addAnswer(UUID questionId, String answer) {
        this.answers.put(questionId, answer);
    }

    public SurveyResponse toSurveyResponse() {
        return new SurveyResponse(
            survey.toSurvey(),
            this.getAnsweredAt(),
            this.getAnswers()
        );
    }
}